/**
 * Admin service for handling admin operations
 */
import { api, toast } from './api';

class AdminService {
  /**
   * Login admin user
   * @param {string} email - Admin email
   * @param {string} password - Admin password
   * @returns {Promise<boolean>} - Success status
   */
  async login(email, password) {
    try {
      const response = await api.post('/auth/admin/login', { email, password });
      
      if (response.token) {
        localStorage.setItem('token', response.token);
        localStorage.setItem('user', JSON.stringify(response.user));
        return true;
      }
      return false;
    } catch (error) {
      console.error('Admin login error:', error);
      const errorMessage = error.response?.data?.message || 'Invalid admin credentials';
      toast.error(errorMessage);
      return false;
    }
  }

  /**
   * Logout admin user
   */
  async logout() {
    try {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      return true;
    } catch (error) {
      console.error('Logout error:', error);
      throw error;
    }
  }

  /**
   * Get admin dashboard statistics
   * @returns {Promise<Object>} - Dashboard statistics
   */
  async getDashboardStats() {
    try {
      const response = await api.get('/admin/dashboard/stats');
      return response;
    } catch (error) {
      console.error('Error fetching dashboard stats:', error);
      toast.error('Failed to load dashboard statistics');
      return {
        total_sales: 0,
        total_orders: 0,
        total_customers: 0,
        total_products: 0,
        sales_by_month: [],
        top_products: []
      };
    }
  }

  /**
   * Get products with pagination and search
   * @param {number} page - Page number
   * @param {number} limit - Items per page
   * @param {string} search - Search query
   * @returns {Promise<Object>} - Products data
   */
  async getProducts(page = 1, limit = 10, search = '') {
    try {
      const params = { page, limit };
      if (search) params.search = search;
      
      const response = await api.get('/admin/products', { params });
      return {
        products: response.products || [],
        totalPages: response.totalPages || 1,
        currentPage: response.currentPage || 1,
        total: response.total || 0
      };
    } catch (error) {
      console.error('Error fetching products:', error);
      toast.error('Failed to load products');
      return { products: [], totalPages: 1, currentPage: 1, total: 0 };
    }
  }

  /**
   * Get product by ID
   * @param {string} id - Product ID
   * @returns {Promise<Object>} - Product data
   */
  async getProductById(id) {
    try {
      const response = await api.get(`/admin/products/${id}`);
      return response;
    } catch (error) {
      console.error('Error fetching product:', error);
      toast.error('Failed to load product details');
      throw error;
    }
  }

  /**
   * Create a new product
   * @param {Object} productData - Product data
   * @returns {Promise<Object>} - Created product
   */
  async createProduct(productData) {
    try {
      // If images is already a string, we assume it's already properly formatted
      // Otherwise, we need to stringify it
      if (productData.images && typeof productData.images !== 'string') {
        productData.images = JSON.stringify(productData.images);
      }
      
      const response = await api.post('/admin/products', productData);
      toast.success('Product created successfully');
      return response;
    } catch (error) {
      console.error('Error creating product:', error);
      toast.error(error.response?.data?.message || 'Failed to create product');
      throw error;
    }
  }

  /**
   * Update product
   * @param {string} id - Product ID
   * @param {Object} productData - Updated product data
   * @returns {Promise<Object>} - Updated product
   */
  async updateProduct(id, productData) {
    try {
      // Process images if needed
      if (productData.images && typeof productData.images !== 'string') {
        productData.images = JSON.stringify(productData.images);
      }
      
      const response = await api.put(`/admin/products/${id}`, productData);
      toast.success('Product updated successfully');
      return response;
    } catch (error) {
      console.error('Error updating product:', error);
      toast.error(error.response?.data?.message || 'Failed to update product');
      throw error;
    }
  }

  /**
   * Delete product
   * @param {string} id - Product ID
   * @returns {Promise<Object>} - Deleted product
   */
  async deleteProduct(id) {
    try {
      const response = await api.delete(`/admin/products/${id}`);
      toast.success('Product deleted successfully');
      return response;
    } catch (error) {
      console.error('Error deleting product:', error);
      toast.error(error.response?.data?.message || 'Failed to delete product');
      throw error;
    }
  }

  /**
   * Get all categories
   * @returns {Promise<Array>} - Categories list
   */
  async getCategories() {
    try {
      const response = await api.get('/admin/categories');
      return response;
    } catch (error) {
      console.error('Error fetching categories:', error);
      toast.error('Failed to load categories');
      return { categories: [] };
    }
  }

  /**
   * Get category by ID
   * @param {string} id - Category ID
   * @returns {Promise<Object>} - Category data
   */
  async getCategoryById(id) {
    try {
      const response = await api.get(`/admin/categories/${id}`);
      return response;
    } catch (error) {
      console.error('Error fetching category:', error);
      toast.error('Failed to load category details');
      throw error;
    }
  }

  /**
   * Create new category
   * @param {Object} categoryData - Category data
   * @returns {Promise<Object>} - Created category
   */
  async createCategory(categoryData) {
    try {
      const response = await api.post('/admin/categories', categoryData);
      toast.success('Category created successfully');
      return response;
    } catch (error) {
      console.error('Error creating category:', error);
      toast.error(error.response?.data?.message || 'Failed to create category');
      throw error;
    }
  }

  /**
   * Update category
   * @param {string} id - Category ID
   * @param {Object} categoryData - Updated category data
   * @returns {Promise<Object>} - Updated category
   */
  async updateCategory(id, categoryData) {
    try {
      const response = await api.put(`/admin/categories/${id}`, categoryData);
      toast.success('Category updated successfully');
      return response;
    } catch (error) {
      console.error('Error updating category:', error);
      toast.error(error.response?.data?.message || 'Failed to update category');
      throw error;
    }
  }

  /**
   * Delete category
   * @param {string} id - Category ID
   * @returns {Promise<Object>} - Deleted category
   */
  async deleteCategory(id) {
    try {
      const response = await api.delete(`/admin/categories/${id}`);
      toast.success('Category deleted successfully');
      return response;
    } catch (error) {
      console.error('Error deleting category:', error);
      toast.error(error.response?.data?.message || 'Failed to delete category');
      throw error;
    }
  }

  /**
   * Get all orders with pagination and filters
   * @param {Object} params - Query parameters
   * @returns {Promise<Object>} - Orders data
   */
  async getOrders(params = {}) {
    try {
      const response = await api.get('/admin/orders', { params });
      return response;
    } catch (error) {
      console.error('Error fetching orders:', error);
      toast.error('Failed to load orders');
      return { orders: [], totalPages: 1, currentPage: 1, total: 0 };
    }
  }

  /**
   * Get order by ID
   * @param {string} id - Order ID
   * @returns {Promise<Object>} - Order data
   */
  async getOrderById(id) {
    try {
      const response = await api.get(`/admin/orders/${id}`);
      return response;
    } catch (error) {
      console.error('Error fetching order:', error);
      toast.error('Failed to load order details');
      throw error;
    }
  }

  /**
   * Update order status
   * @param {string} id - Order ID
   * @param {string} status - New status
   * @returns {Promise<Object>} - Updated order
   */
  async updateOrderStatus(id, status) {
    try {
      const response = await api.put(`/admin/orders/${id}/status`, { status });
      toast.success('Order status updated successfully');
      return response;
    } catch (error) {
      console.error('Error updating order status:', error);
      toast.error(error.response?.data?.message || 'Failed to update order status');
      throw error;
    }
  }

  /**
   * Get all customers with pagination and search
   * @param {Object} params - Query parameters
   * @returns {Promise<Object>} - Customers data
   */
  async getCustomers(params = {}) {
    try {
      const response = await api.get('/admin/customers', { params });
      return response;
    } catch (error) {
      console.error('Error fetching customers:', error);
      toast.error('Failed to load customers');
      return { customers: [], totalPages: 1, currentPage: 1, total: 0 };
    }
  }

  /**
   * Get customer by ID
   * @param {string} id - Customer ID
   * @returns {Promise<Object>} - Customer data
   */
  async getCustomerById(id) {
    try {
      const response = await api.get(`/admin/customers/${id}`);
      return response;
    } catch (error) {
      console.error('Error fetching customer:', error);
      toast.error('Failed to load customer details');
      throw error;
    }
  }

  /**
   * Get newsletter subscribers
   * @param {Object} params - Query parameters
   * @returns {Promise<Object>} - Subscribers data
   */
  async getNewsletterSubscribers(params = {}) {
    try {
      const response = await api.get('/admin/newsletter/subscribers', { params });
      return response;
    } catch (error) {
      console.error('Error fetching newsletter subscribers:', error);
      toast.error('Failed to load newsletter subscribers');
      return { subscribers: [], totalPages: 1, currentPage: 1, total: 0 };
    }
  }

  /**
   * Export newsletter subscribers to CSV
   * @returns {Promise<Blob>} - CSV file blob
   */
  async exportNewsletterSubscribers() {
    try {
      const response = await api.get('/admin/newsletter/subscribers/export', { responseType: 'blob' });
      return response;
    } catch (error) {
      console.error('Error exporting newsletter subscribers:', error);
      toast.error('Failed to export newsletter subscribers');
      throw error;
    }
  }

  /**
   * Get analytics data
   * @param {Object} params - Query parameters (timeframe, etc.)
   * @returns {Promise<Object>} - Analytics data
   */
  async getAnalytics(params = {}) {
    try {
      const response = await api.get('/admin/analytics', { params });
      return response;
    } catch (error) {
      console.error('Error fetching analytics:', error);
      toast.error('Failed to load analytics data');
      return {};
    }
  }
}

const adminService = new AdminService();
export default adminService;
